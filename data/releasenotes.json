[
	{
		"version": "alpha/2025-01-17",
		"date": "2025-01-17",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> CedarDB now asynchronously loads data from disk into its page cache. This makes queries that touch data that is not currently cached up to 4x faster!",
			"<b>New Feature:</b> Output of <tt>explain</tt> is now flatter, allowing you to more easily read query plans of complex queries. For a full overview and instructions on how to get back the old behavior, please refer to <a href=https://cedardb.com/docs/references/sqlreference/statements/explain>our docs</a>.",
			"<b>New Feature:</b> You can now cast integers to bitstrings: <tt>select 29::bit(4)</tt>.",
			"<b>New Feature:</b> Support for read-only transaction via <tt>set transaction_read_only</tt>.",
			"<b>New Feature:</b> <tt>explain analyze</tt> now returns more detailed information about execution times.",
			"<b>PostgreSQL compatibility:</b> System tables and views are now shown in <tt>pg_class</tt>.",
			"<b>PostgreSQL compatibility:</b> Allow parsing values of type <tt>time</tt> from strings that also specify a date.",
			"<b>PostgreSQL compatibility:</b> Correct handling of namespaces and owners in system tables.",
			"<b>PostgreSQL compatibility:</b> <tt>pg_table_is_visible()</tt> now correctly observes <tt>search_path</tt>.",
			"<b>PostgreSQL compatibility:</b> Enforce precision of numerics when casting them from strings or integral types.",
			"<b>PostgreSQL compatibility:</b> Ensure that <tt>oid</tt>s in system tables are always larger than 0. Required by some clients.",
			"<b>PostgreSQL compatibility:</b> Support binary output of the <tt>ByteArray</tt> and <tt>Time</tt> datatypes.",
			"<b>PostgreSQL compatibility:</b> Looking up functions now works with fully qualified names as well: <tt>select 'pg_catalog.sum(int)'::regproc;</tt>",
			"<b>PostgreSQL compatibility:</b> Add <tt>array_in</tt> dummy function in <tt>pg_proc</tt> and <tt>pg_types</tt>. Required by some JDBC queries inferring whether a given type is an array type.",
			"<b>Maintenance:</b> Print nicer error message when exceeding the maximum precision of a numeric.",
			"<b>Maintenance:</b> Fix a bug with <tt>null</tt> handling in <tt>generate_subscripts()</tt>.",
			"<b>Maintenance:</b> Got rid of pesky irrelevant message about perf counters not being able to be initialized.</tt>",
			"<b>Maintenance:</b> Fixed a bug where the state of sequences was not correctly recovered after a system crash."
		]
	},
	{
		"version": "alpha/2025-01-03",
		"date": "2025-01-03",
		"breaksdb": false,
		"notes": [
			"<b>Performance:</b> Vectorize printing of UUIDs. This drastically speeds up performance for queries returning a lot of UUIDs.",
			"<b>Performance:</b> Refined optimizer logic on when to employ an index scan when buffer size is limited to further reduce buffer thrashing.",
			"<b>Maintenance:</b> Columns can now be called 'step' again.",
			"<b>Maintenance:</b> Fixed a bug where index scans in combination with a <tt>limit</tt> without <tt>order by</tt> clause did not produce all matching tuples.",
			"<b>Maintenance:</b> Fixed a bug where index range scans in combination with a <tt>limit</tt> did not produce all matching tuples.",
			"<b>Maintenance:</b> Fixed a bug where inserting null values reported a unique constraint violation if the index enforcing uniqueness was created after rows had already been inserted.",
			"<b>Maintenance:</b> Fixed several bugs in unnesting of asof joins.",
			"<b>Maintenance:</b> Fixed a crash when calling <tt>pg_get_view_def</tt> on views with long names.",
			"<b>Maintenance:</b> Fixed a bug where using non constant <tt>limit</tt> or <tt>offset</tt> declarations triggered an assert.",
			"<b>Maintenance:</b> Fixed a race condition when changing settings concurrently.",
			"<b>Maintenance:</b> Fixed a bug where queries operating on tables with multiple unique and non-unique indexes would skip some rows.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-12-24",
		"date": "2024-12-24",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> We have added support for explain statements after different query optimization steps. For example, <tt>explain (step Unnesting) select * from foo, bar where foo.a = bar.b</tt> shows the query tree after the 'Unnesting' optimization step but before the 'Predicate Pushdown' step. For the syntax and available steps, please refer to <a href=https://cedardb.com/docs/references/sqlreference/statements/explain/#step>our docs</a>.",
			"<b>Performance:</b> The logic deciding whether to use an index for a join is now more sophisticated. Previously, it could happen that CedarDB suddenly switched to a very disadvantageous query plan once a relation's size reached 10% of the available main memory. CedarDB now also takes the cost of buffer thrashing into account, not only a relation's size.",
			"<b>Performance:</b> CedarDB is now more careful on when it holds an exclusive lock on the database schema during DDL statements, improving performance of DDL queries.",
			"<b>PostgreSQL compatibility:</b> Support for non constant values for <tt>limit</tt> offset: It is now possible to prepare queries like <tt> select * from foo limit $1 offset $2</tt>. This was e.g. required by <a href=https://orm.drizzle.team/drizzle-studio/overview>Drizzle Studio</a>.",
			"<b>PostgreSQL compatibility:</b> Add <tt>pg_column_is_updatable()</tt> builtin function.",
			"<b>Maintenance:</b> Fix a bug in the null-handling logic of <tt>IN</tt> expressions which triggered a faulty assert. Also occured in instances where no explicit <tt>IN</tt> expression was present but CedarDB optimized a different expression into such an expression.",
			"<b>Maintenance:</b> Tables created in the temporary <tt>pg_temp</tt> namespace can now actually be referenced in queries and aren't lost to the aether.",
			"<b>Maintenance:</b> Fix a race condition in the group commit queue where a thread waiting for a sync to disk was notified before it started to wait. This could lead to deadlocks of bulk transactions ",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-12-16",
		"date": "2024-12-16",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Add support for the <tt>serial</tt>, <tt>smallserial</tt>, and <tt>bigserial</tt> data types.",
			"<b>New Feature:</b> Add trigonometric functions with degrees: <tt>acosd, asind, atand, cosd, cotd, sind, tand</tt>.",
			"<b>New Feature:</b> Add hyperbolic trigonometric functions: <tt>sinh, cosh, tanh, asinh, acosh, atanh</tt>.",
			"<b>New Feature:</b> Add support for <tt>generate_subscripts()</tt>.",
			"<b>New Feature:</b> Very basic support for the <a href=https://orm.drizzle.team/>Drizzle</a> ORM.",
			"<b>Performance:</b> Doing inserts in batches of 128 or more elements is now considerably faster.",
			"<b>Performance:</b> <tt>coalesce</tt> expressions with large number of arguments are now optimized in linear instead of quadratic time.",
			"<b>PostgreSQL compatibility:</b> support parsing oids from namespace literals: <tt>select 'pg_temp'::regnamespace </tt>.",
			"<b>PostgreSQL compatibility:</b> calling <tt>json_array_elements()</tt> on null now returns an empty string.",
			"<b>PostgreSQL compatibility:</b> malformed protocol messages now return the <tt>ProtocolViolation</tt> error code instead of <tt>InternalError</tt>.",
			"<b>PostgreSQL compatibility:</b> Failing to authenticate now returns the correct error codes.",
			"<b>PostgreSQL compatibility:</b> It is now possible to bind up to 65535 parameters to a prepared statement, instead of the previous maximum of 32767.",
			"<b>PostgreSQL compatibility:</b> The <tt>pg_columnkeys</tt> column in the <tt>pg_constraint</tt> and <tt>pg_index</tt> system tables are now 1-indexed instead of 0-indexed.",
			"<b>PostgreSQL compatibility:</b> Add <tt>has_sequence_privilege()</tt> builtin function.",
			"<b>PostgreSQL compatibility:</b> Add <tt>pg_sequence_last_value()</tt> builtin function.",
			"<b>PostgreSQL compatibility:</b> Update the <tt>pg_sequence</tt> system view to return meaningful data.",
			"<b>PostgreSQL compatibility:</b> List sequences in the <tt>pg_class</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Add stubbed <tt>pg_get_serial_sequence()</tt> builtin function.",
			"<b>PostgreSQL compatibility:</b> Add stubbed <tt>pg_stat_user_indexes</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Add stubbed <tt>pg_stat_all_indexes</tt> system table.",
			"<b>Maintenance:</b> Fix an exception when parsing <tt>SET</tt> statements.",
			"<b>Maintenance:</b> Malformed client messages are now handed gracefully and close the connection instead of triggering an assertion failure.",
			"<b>Maintenance:</b> Automatically abort queries that run into a live lock. This could happen when trying to evict buffer pages while all buffer pages where pinned.",
			"<b>Maintenance:</b> Parsing alter role statements setting the connection limit to values lower than -1 now throws the expected error instead of triggering an assert.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-12-05",
		"date": "2024-12-05",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> The docker image is now compatible with external <tt>pg_isready</tt> health checks. Previously, CedarDB would be started and stopped multiple times during setup while being externally reachable. This caused <tt>pg_isready</tt> to prematurely declare CedarDB being up and subsequent connections to fail.",
			"<b>New Feature:</b> Log messages are now prefixed with a timestamp.",
			"<b>New Feature:</b> More detailed CSV import error messages: When the format is wrong, CedarDB now returns the offending column and the detailed issue.",
			"<b>PostgreSQL compatibility:</b> Sequence names now automatically convert to oids. You can now write <tt>CREATE SEQUENCE serial; select nextval('serial');</tt>",
			"<b>PostgreSQL compatibility:</b> Support for <tt>factorial(n)</tt>, in addition to the already existing <tt>n!</tt> and <tt>!!n</tt>.",
			"<b>PostgreSQL compatibility:</b> Subtracting two dates now returns an integer with the difference in days, instead of an interval.",
			"<b>PostgreSQL compatibility:</b> <tt>split_part</tt> now allows for negative arguments to search backward from the end and correctly returns <tt>null</tt> in some corner cases.",
			"<b>Maintenance:</b> Fixed a bug where docker containers would not start correctly on Windows.",
			"<b>Maintenance:</b> Removed a few spurious asserts which gave the impression something went wrong when everything was in fact fine.",
			"<b>Maintenance:</b> Fixed a crash for queries which would join at least two tables using the <tt>json_array_elements</tt> set generating function.",
			"<b>Maintenance:</b> Fixed a rare deadlock when creating indexes. This could happen when re-creating an index after dropping it.",
			"<b>Maintenance:</b> Fixed an issue where dropped indexes were wrongly restored when a concurrent transaction also modifying it was aborted.",
			"<b>Maintenance:</b> Fixed a case where CedarDB tried to truncate a log too early and subsequently failed an assert.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-11-21",
		"date": "2024-11-21",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Add support for <tt>psql</tt> builtin describe commands <tt>\\d table</tt> and <tt>\\d+ table</tt>.",
			"<b>PostgreSQL compatibility:</b> Include attribute defaults in the <tt>pg_attrdef</tt> system table.",
			"<b>Performance:</b> Reduce transaction tail latency: When the overall write-ahead log size becomes too large, writing transactions are now throttled instead of paused.",
			"<b>Maintenance:</b> Fix a rare deadlock during concurrent compression of inserts.",
			"<b>Maintenance:</b> Fix a crash when inserting strings just smaller than 64 KB.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-11-15",
		"date": "2024-11-15",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> This release comes with a new Docker image that more closely mirrors the behavior of the official Postgres image. You can now pass the superuser name and password as environment variabls at container startup instead of having to create them manually inside Docker! For a full list of changes and new features, check out our new <a href=/docs/getting_started/running_docker_image/ target=_blank> Docker docs</a>.",
			"<b>New Feature:</b> The Docker image now correctly exports the <tt>PG_HOST</tt> environment variable. When using psql from inside the Docker container, you no longer need to write <tt>-h /tmp</tt>.",
			"<b>Performance:</b> More aggressive autocompression of tables. Previously, CedarDB only compressed tuples during bulk inserts, scan-intensive queries or when the user manually executed <tt>VACUUM</tt>. CedarDB now also autocompresses tuples after small inserts, which considerably improves table scan performance and significantly reduces storage consumption for write-intensive workloads",
			"<b>PostgreSQL compatibility:</b> Constructing an array from empty input now returns an empty array instead of null, e.g. <tt>select array(select * from unnest(ARRAY[]::text[]));</tt>",
			"<b>PostgreSQL compatibility:</b> Mirror undocumented Postgres behavior regarding function and table aliases: <tt> select a from foo a </tt> now works.",
			"<b>Maintenance:</b> Fixed a race condition in the buffer manager where CedarDB could lose updates. This race condition caused the database to shut down and the recovery process to complain about an invalid system state. It was only triggered under heavy memory pressure when a page was incorrectly selected twice for eviction.",
			"<b>Maintenance:</b> User defined functions are now formatted correctly when printing with <tt>explain (analyze, format sql)</tt>.",
			"<b>Maintenance:</b> Fixed a rare case where <tt>IN</tt> expressions with nullable inputs could cause a query to abort</tt>.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-11-05",
		"date": "2024-11-05",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Improved internal memory allocation: CedarDB now tracks memory consumption during query execution and aborts queries consuming too much working memory.",
			"<b>New Feature:</b> Add <tt>VACUUM</tt> statement. It manually triggers data compression of newly inserted data that hasn't been queried often yet.",
			"<b>Performance:</b> Greatly speed up queries of the pattern <tt> SELECT * FROM foo LIMIT 1</tt>.",
			"<b>Performance:</b> Improve estimates on tables with unique constraints.",
			"<b>Performance:</b> Reduce write-ahead log size. CedarDB now tries to prune the log much more eagerly to reduce disk space consumption.",
			"<b>PostgreSQL compatibility:</b> Add name datatype to <tt>pg_type</tt> system table. Required by some ORMs using JDBC (e.g., \"Exposed\") to infer maximum length of table names and columns.",
			"<b>PostgreSQL compatibility:</b> Allow parsing dates from strings specifying a full timestamp. Used by some ORMs such as \"Exposed\" to construct dates.",
			"<b>Maintenance:</b> Fix case where created functions couldn't be dropped.",
			"<b>Maintenance:</b> Fix deadlock when client connection unexpectedly drops.",
			"<b>Maintenance:</b> Upgraded to LLVM 19.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-10-17",
		"date": "2024-10-17",
		"breaksdb": false,
		"notes": [
			"<b>Maintenance:</b> Stability fix for replanning prepared statements with UPSERTs."
		]
	},
	{
		"version": "alpha/2024-10-16",
		"date": "2024-10-16",
		"breaksdb": false,
		"notes": [
			"<b>Maintenance:</b> Check for newer CedarDB versions on Docker startup.",
			"<b>Maintenance:</b> Fix rare cases of lost tuples in UPSERT queries.",
			"<b>Maintenance:</b> Use consistent sort order for BLOB types.",
			"<b>Performance:</b> Lazily compile prepared statements.",
			"<b>PostgreSQL compatibility:</b> Use PostgreSQL-compliant BigNumeric type truncation.",
			"<b>PostgreSQL compatibility:</b> Support <tt>regclass</tt> casts for system tables.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-10-11",
		"date": "2024-10-11",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Added support for <a href=/docs/references/advanced/asof_join/ target=_blank>AsOf joins</a>.",
			"<b>New Feature:</b> Added support for <a href=/docs/references/sqlreference/statements/upsert target=_blank>upserts</a> through <tt>ON CONFLICT DO UPDATE</tt> and <tt>ON CONFLICT DO NOTHING</tt>.",
			"<b>New Feature:</b> Added support for additional <a href=/docs/references/sqlreference/functions/aggregation/ target=_blank>aggregation functions</a>.",
			"<b>Maintenance:</b> Update the timezone database to version 2024b.",
			"<b>Maintenance:</b> Fix daylight savings time handling for regions with daylight savings differences other than 1 hour.",
			"<b>Performance:</b> Improve join unnesting for dependent joins.",
			"<b>Performance:</b> Various cardinality estimation improvements.",
			"<b>Performance:</b> Add vectorization support for pg_vector-type cosine distance calcultions.",
			"<b>Performance:</b> Lazily compile user-defined functions.",
			"<b>PostgreSQL compatibility:</b> Support array-constructing subqueries: <tt>select array(values(1),(1));</tt> returns <tt>{1,1}</tt>.",
			"<b>PostgreSQL compatibility:</b> Added <tt>has_column_privilege()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Added <tt>has_function_privilege()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Improve output of <tt>pg_attribute</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Improve output of <tt>pg_type</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Full support for <tt>pg_timezone_names</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Full support for <tt>pg_timezone_abbrevs</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Added support for <tt>default</tt> keyword in <tt>INSERT</tt> statements.",
			"<b>PostgreSQL compatibility:</b> Use PostgreSQL-compliant sort order for <tt>bytea</tt> type.",
			"<b>PostgreSQL compatibility:</b> Fix output of <tt>current_schema()</tt> function.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-09-13",
		"date": "2024-09-13",
		"breaksdb": true,
		"notes": [
			"<b>New Feature:</b> Implemented the functionality of the <a href=https://github.com/pgvector/pgvector>pgvector</a> extension. For a feature description take a look at the <a href=../references/datatypes/vector>vector datatype reference</a>, the <a href=../references/advanced/pgvector>pgvector extension compatibility docs</a>, or follow <a href=../example_datasets/glove>our new vector tutorial</a>.",
			"<b>New Feature:</b> Restructured database file storage: All files of a given database are stored in the same directory to declutter your server. Existing database files will be converted to the new format automatically on startup, no manual intervention required.",
			"<b>New Feature:</b> Added support for quantified expressions over subqueries and arrays: <br /> <tt>with tmp(x) as (select array[1,2,3]) select 1 = ANY(x) from tmp</tt>.",
			"<b>New Feature:</b> Implicitly cast string constants in binary expressions: You can now, for example, write <tt> 123 + '456'</tt>.",
			"<b>New Feature:</b> Better type deduction for unknown types: Parameters now seamlessly work in function calls. For example <tt>lower($1)</tt> now treats the parameter as a string.",
			"<b>New Feature:</b> Added support for row results in subqueries and non constant arrays: <br /> <tt>select (r.r).\"2\", (r.r).\"1\", (r.r).\"0\" from (select row('foo','bar','baz')) r(r)\"</tt> returns <tt> baz bar foo </tt>.",
			"<b>Maintenance:</b> Introduce recovery log versioning to reduce the likelihood of having to break backwards compatibility in the future.",
			"<b>Performance:</b> Optimizer: Improved cardinality estimation for very selective predicates. This sometimes improves execution plans, where we observed cases of 10x speedup",
			"<b>Performance:</b> Implemented a heuristic that inlines CTEs that materialize a large state but are cheap to recalculate. This improves TPC-DS Q95's performance by about 10x, for example.",
			"<b>Performance:</b> More aggressively use band joins where beneficial, even if the query does not contain <tt>between</tt> conditions.",
			"<b>Performance:</b> Optimize concat calls with single arguments: <tt> concat(x)</tt> becomes <tt> cast(x as text)</tt>.",
			"<b>PostgreSQL compatibility:</b> Honor Postgres <tt>AS NOT MATERIALIZED</tt> hint in CTEs.",
			"<b>PostgreSQL compatibility:</b> Timestamp calculations are now done in UTC instead of local time in accordance with the Postgres docs.",
			"<b>PostgreSQL compatibility:</b> When adding intervals to timestamps, the months, days, and microseconds fields of the interval value are handled in turn.",
			"<b>PostgreSQL compatibility:</b> Correctly output regclass and regtype names: For example, <tt>pg_typeof(42)</tt> now returns <tt>'int4'</tt> instead of a cryptic identifier.",
			"<b>PostgreSQL compatibility:</b> <tt>trim()</tt> now allows for Postgres' alternative syntax: Instead of <tt>trim('x' from 'xfoox')</tt> you can now also write <tt>trim('xfoox','x')</tt>.",
			"<b>PostgreSQL compatibility:</b> Added <tt>to_regtype()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Added <tt>pg_typeof()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Added <tt>nameconcatoid()</tt> function.",
			"Various bug fixes, stability, and performance improvements."
		]
	},

	{
		"version": "alpha/2024-07-24",
		"date": "2024-07-24",
		"breaksdb": true,
		"notes": [
			"<b>Maintenance:</b> Split data file and schema version numbering to reduce the likelihood of having to break backwards compatibility in the future",
			"<b>PostgreSQL compatibility:</b> Full support for all PostgreSQL timezone abbreviations",
			"<b>PostgreSQL compatibility:</b> Parse (not-) materialized Common Table Expression hints",
			"<b>PostgreSQL compatibility:</b> Added for pg_proc system table",
			"<b>PostgreSQL compatibility:</b> Added pg_function_is_visible() function",
			"Various bug fixes and stability improvements"
			 
		]
	},
	{
		"version": "alpha/2024-07-12",
		"date": "2024-07-12",
		"notes": [
			"<b>New Feature:</b> Support for SQL UDF table functions in SELECT statements",
			"<b>New Feature:</b> Allow creating and releasing SAVEPOINTs within transactions",
			"<b>New Feature:</b> Support quantified expressions over constant arrays",
			"<b>New Feature:</b> Support 'ON CONFLICT DO NOTHING' for upserts",
			"<b>PostgreSQL compatibility:</b> Support for parsing 'COPY FREEZE' performance hint",
			"<b>PostgreSQL compatibility:</b> Support for compound date styles",
			"<b>PostgreSQL compatibility:</b> The pg_class system table now also shows views",
			"<b>PostgreSQL compatibility:</b> The pg_constraint system table now also shows indexes",
			"<b>PostgreSQL compatibility:</b> Added pg_relation_is_updateable() function",
			"<b>PostgreSQL compatibility:</b> Added pg_my_temp_schema()",
			"<b>PostgreSQL compatibility:</b> Added pg_description system table",
			"<b>PostgreSQL compatibility:</b> Added has_schema_privileges() function",
			"<b>PostgreSQL compatibility:</b> Added has_any_column_privilege() function",
			"<b>PostgreSQL compatibility:</b> Added pg_get_keywords() function",
			"<b>Performance:</b> 300x performance improvement for calculating table sizes via pg_total_relation_size()",
			"Various bug fixes and stability improvements"
		]
	}
]
