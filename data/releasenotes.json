[
		{
		"version": "v2025-10-22",
		"date": "2025-10-22",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Add `uuidv7` to generate UUIDv7 containing timestamps",
			"<b>New Feature:</b> Add `great_circle_distance` to calculate geospatial distances between two points represented as latitude, longitude pairs.",
			"<b>New Feature:</b> Add <tt>transaction_timeout</tt> and <tt>idle_in_transaction_session_timeout</tt> session settings. When set to any time span, connections with long-running or idling transactions are automatically closed, e.g. to reduce WAL bloat: <tt> SET idle_in_transaction_session_timeout TO '6h'</tt>. Off by default.",
			"<b>New Feature:</b> Add support for the `#` operator on bit strings: `select b'101' # b'100';`",
			"<b>New Feature:</b> Add support for the `|` operator on bit strings: `select b'101' | b'100';`",
			"<b>PostgreSQL Compatibility:</b> Improve binary function overload resolution",
			"<b>Performance:</b> Improve scheduling under high query load to reduce P99 latencies.",
			"<b>Performance:</b> Adding foreign key constraints does not require a bulk writer anymore",
			"<b>Performance:</b> Improve automated frame of reference compression leading to up to 57 % better compression ratios and 23 % increased table scan performance.",
			"<b>Performance:</b> Speed up daylight-savings time rule evaluation for timestamps with time zone. This can improve performance for time series workloads by up to 40%.",
			"<b>Maintenance:</b> Update timezone database to 2025b",
			"<b>Maintenance:</b> Harden prepared statements against parallel DDL operations",
			"<b>Maintenance:</b> Fix rare cases of out-of-bound reads during query processing",
			"<b>Maintenance:</b> Allow using alias when directly using file names in from clause, e.g. `select c.* from 'file.csv' c`"
		]
	},
		{
		"version": "v2025-10-07",
		"date": "2025-10-07",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Improved the install script. It now supports a non-interactive mode for automatic installation, creating a symlink in <tt>/usr/local/bin</tt>, and installing cedardb as systemd socket-activated service.",
			"<b>New Feature:</b> Added support for the <tt>&</tt> operator on bit strings: <tt>select b'101' & b'100';</tt>.",
			"<b>Performance:</b> Speed up expressions of type <tt>timestamptz at time zone</tt> by 35% by caching the local time zone.",
			"<b>PostgreSQL Compatibility:</b> CedarDB is now more lenient in which non-standard COPY FROM messages it accepts, enabling to bulk copy data from GO's pgx.",
			"<b>Maintenance:</b> Don't crash on multi-line comments at statement start"
		]
	},
	{
		"version": "v2025-09-30",
		"date": "2025-09-30",
		"breaksdb": false,
		"notes": [
		        "<b>New Feature:</b> Add support for timestamptz arguments in <tt>date_trunc</tt> and <tt>age</tt></b>",
			"<b>PostgreSQL compatibility:</b> Adhere to PostgreSQL behaviour for empty-array-specification-and-cast combinations, e.g., <tt>[]::text</tt>.</b>",
			"<b>PostgreSQL compatibility:</b> Return row count for <tt>CREATE (TEMPORARY) TABLE AS</tt> statements.</b>",
			"<b>PostgreSQL compatibility:</b> Allow using table aliases in <tt>DISTINCT ON</tt> clauses.</b>",
			"<b>Performance:</b> Allow constant folding for all integer types, not only int4.",
			"<b>Performance:</b> Improve performance of table scans on compressed data by up to 25%.",
			"<b>Maintenance:</b> Long-running read-only transactions no longer block log truncation, drastically reducing peak log size on disk in some cases.",
			"<b>Maintenance:</b> Fix a bug triggering asserts in an edge case in temporary tables",
			"<b>Maintenance:</b> Fix date_trunc behaviour for BC timestamps and dates"
		]
	},
	{
		"version": "v2025-09-24",
		"date": "2025-09-24",
		"breaksdb": false,
		"notes": [
            "<b>New Feature:</b> CedarDB now allows for persistent configuration parameters via a config file. Read more on the <a href= https://cedardb.com/docs/references/configuration/>configuration docs page</a>.",
			"<b>PostgreSQL compatibility:</b> CedarDB now treats parameter of type <tt>unknown</tt> as <tt>text</tt> like Postgres does.",
			"<b>PostgreSQL compatibility:</b> The <tt>pg_prepared_statements</tt> system table now reports the result type of prepared statements.",

			"<b>Performance:</b> Improved automated dictionary compression leading to up to 20% better compression ratios and 12% increased table scan performance.",
			"<b>Performance:</b> Recursive CTEs that include unused columns are now significantly faster.",
			"<b>Maintenance:</b> Renamed some settings that previously had to be prefaced with <tt>debug.</tt> to have more intuitive names. You can find a list of all settings at the <a href= https://cedardb.com/docs/references/configuration/>configuration docs page</a>.",
			"<b>Maintenance:</b> CedarDB now returns the correct row count for statements that affected more than <tt>2^31</tt> rows.",
			"<b>Maintenance:</b> Fixed a bug that triggered an assertion in the undocumented Postgres functions <tt>float4send</tt>, <tt>float8send</tt>, and <tt>pg_options_to_table</tt>.",
			"<b>Maintenance:</b> Fixed a bug that triggered an assertion when casting a <tt>vector</tt> with a fixed number of dimensions to a <tt>vector</tt> with variable dimensions.",
			"<b>Maintenance:</b> Fixed a bug where CedarDB didn't correctly handle nullability in <tt>greatest()</tt> and <tt>least()</tt> under some circumstances.",
			"<b>Maintenance:</b> Fixed a bug where new schemas couldn't be created after a restart.",
			"<b>Maintenance:</b> CedarDB now accepts startup messages consisting of multiple fragmented TCP packets.",
			"<b>Maintenance:</b> Fixed a rare case where CedarDB failed an assertion when preparing a statement with an argument of type <tt>char(1)</tt>."
		]
	},
	{
		"version": "v2025-09-17",
		"date": "2025-09-17",
		"breaksdb": false,
		"notes": [
            "<b>New Feature:</b> Added support for tables on <a href=\"https://cedardb.com/docs/references/advanced/gs/\">Google Cloud Storage</a>.",
			"<b>Maintenance:</b> CedarDB is now much more cautious about when to use bulk transactions during <tt>COPY</tt> statements. This enables parallel loading for most scenarios where CedarDB previously rejected a second <tt>COPY</tt> statement due to an already active bulk transaction.",
			"<b>Maintenance:</b> CedarDB now correctly detects correlated UDF arguments within CTEs and will now return a \"Feature Not Supported\" error instead of throwing an assertion.",
            "<b>Maintenance:</b> <tt>asof joins</tt> where one side only has a single tuple now return the correct results in all cases.",
			"<b>Maintenance:</b> CedarDB now correctly handles arbitrarily nested <tt>PREPARE</tt> statements. You can now <tt>EXECUTE</tt> a <tt>PREPARE</tt>d <tt>EXECUTE</tt> statement."
		]
	},
	{
		"version": "v2025-09-10",
		"date": "2025-09-10",
		"breaksdb": false,
		"notes": [
            "<b>New Feature:</b> Added <tt>to_char(timestamp[tz], text)</tt>.",
			"<b>Performance</b>: Improved performance of regex matching, speeding up some queries by up to 2%.",
			"<b>Performance</b>: Improved performance of float-to-float comparisons by up to 20%.",
			"<b>PostgreSQL compatibility:</b> Improve overload resolution in function arguments. For example, <tt>select sin(null);</tt> now works without an explicit cast.",
			"<b>PostgreSQL compatibility:</b> <tt>factorial(n)</tt> now returns a <tt>numeric</tt> instead of a <tt>bigint</tt>.",
			"<b>Maintenance:</b> Fixed a bug where <tt>COPY FROM</tt> didn't work for temporary tables.",
			"<b>Maintenance:</b> Fixed handling of null arrays in quantified expressions: <tt>select 1 = ANY(NULL)</tt> now correctly returns <tt>NULL</tt>.",
			"<b>Maintenance:</b> Fixed a bug where the query optimizer bailed after generating selectivity estimates larger than 1 on equality estimations.",
			"<b>Maintenance:</b> Ensure that <tt>NaN</tt> is handled correctly in <tt>float</tt>-to-<tt>float</tt> comparisons.",
			"<b>Maintenance:</b> Fixed a bug where the converting a <tt>timestamp</tt> to <tt>timestamptz</tt> via <tt>at time zone</tt> miscalculated the timezone offset.",
			"<b>Maintenance:</b> Ensure <tt>union</tt> always removes duplicates, even if CedarDB can optimize the union operator away.",
			"<b>Maintenance:</b> Fixed an overeager warning in the buffer manager.",
			"<b>Maintenance:</b> Fixed a rare race condition that could trigger when the buffer manager repurposed previously used buffer pages."
		]
	},
	{
		"version": "v2025-08-27",
		"date": "2025-08-27",
		"breaksdb": false,
		"notes": [
            "<b>New Feature:</b> The <a href=\"https://cedardb.com/docs/compatibility/system_table/#cedardb_compression_info\"><tt>cedardb_compression_info</tt></a> system table now shows the uncompressed size of text columns.",
            "<b>New Feature:</b> <a href=\"https://cedardb.com/docs/references/advanced/s3/\">S3-backed tables</a> now appear in the system tables <tt>pg_foreign_server</tt>, <tt>pg_foreing_data_wrapper</tt> and <tt>pg_foreign_table</tt>.",
            "<b>New Feature:</b> The write-ahead-log is now directly truncated after a successful recovery. This drastically reduces WAL bloat when restarting after a system crash.",
			"<b>PostgreSQL compatibility:</b> Restored compatibility with rsql.",
			"<b>PostgreSQL compatibility:</b> The Docker image now (correctly) ignores the <tt>PGHOST</tt> environment variable.",
			"<b>PostgreSQL compatibility:</b> The <tt>pg_indexes</tt> system table now has a <tt>tablespaces</tt> column.",
			"<b>PostgreSQL compatibility:</b> Databases are automatically seeded with all PostgreSQL <a href=https://www.postgresql.org/docs/current/predefined-roles.html>pre-defined roles</a>.",
			"<b>PostgreSQL compatibility:</b> The <tt>pg_auth_members</tt> system table shows role memberships now.",
			"<b>PostgreSQL compatibility:</b> Make sure <tt>select pg_typeof(last_value) from sequence</tt> always returns <tt>bigint</tt> regardless of the sequence type.",
			"<b>PostgreSQL compatibility:</b> <tt>ceil()</tt>, <tt>floor()</tt>, and <tt>trunc()</tt> now discard fractional digits like Postgres does.",
			"<b>PostgreSQL compatibility:</b> The <tt>vector</tt> (pgvector) type can now cast to arbitrary numeric types including 32-bit floats.",
			"<b>Maintenance:</b> CedarDB now prints the offending string when parsing an invalid JSON value fails during data ingestion.",
			"<b>Maintenance:</b> Fixed a bug where querying <tt>information_schema.tables</tt> triggered an assertion when the database contained tables with columns of the serial type.",
			"<b>Maintenance:</b> Fixed a bug where opening a database didn't succeed after changing the owner of a table.",
			"<b>Maintenance:</b> Improved support for Amazon DMS.",
			"<b>Maintenance:</b> Fixed a bug where exiting the interactive shell would print a <tt>malloc()</tt> error."
		]
	},
	{
		"version": "v2025-08-20",
		"date": "2025-08-20",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Added support for <a href=\"https://cedardb.com/docs/references/sqlreference/functions/text/#regexp_count\"><tt>regexp_count</tt> and <tt>regexp_instr</tt></a>.",
			"<b>New Feature:</b> Added support for <a href=\"https://cedardb.com/docs/references/sqlreference/functions/text/#string_to_table\"><tt>string_to_table</tt></a>.",
            "<b>New Feature:</b> Added support for <tt>drop server</tt>.",
            "<b>New Feature:</b> Added a custom system table <a href=\"https://cedardb.com/docs/compatibility/system_table/#cedardb_compression_info\"><tt>cedardb_compression_infos</tt></a> to show database compressions infos.",
			"<b>PostgreSQL compatibility:</b> Fixed <tt>last_value</tt> column in <tt>pg_sequence</tt>.",
			"<b>PostgreSQL compatibility:</b> Added support for multiple arrays in <tt>unnest(anyarray, ...)</tt>.",
			"<b>PostgreSQL compatibility:</b> Added support for user-defined functions in <tt>FROM</tt>.",
			"<b>PostgreSQL compatibility:</b> Added support for implicit conversions from <tt>text</tt> to <tt>regclass</tt> for <tt>pg_total_relation_size(regclass)</tt> and related functions.",
			"<b>Maintenance:</b> Fixed overly large memory consumption in <tt>COPY FROM STDIN</tt>, i.e., psql's <tt>\\copy</tt> mode.",
			"<b>Maintenance:</b> Prepare for snapshot isolation for DDL statements, unlocking tons of new DDL functionality to be shipped in future releases.",
			"<b>Maintenance:</b> Fixed unchecked overflows when converting float8 to float4."
		]
	},
  {
		"version": "v2025-08-07",
		"date": "2025-08-07",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Added support to read <a href=\"../references/advanced/s3/\">relations from S3</a> using <tt>create server</tt>.",
			"<b>New Feature:</b> Added support for the <tt>real</tt> (float4) floating point datatype. CedarDB previously used double precision for single precision numbers.",
			"<b>New Feature:</b> Added support for <tt>jsonb || jsonb</tt> aka <tt>jsonb_concat(jsonb, jsonb, ...)</tt>.",
			"<b>New Feature:</b> Added support for <tt>regexp_like(text, text)</tt>.",
			"<b>Performance:</b> Reduced memory consumption for large text-heavy CSV scans.",
			"<b>Performance:</b> Reduced memory consumption and improved performance of group by spooling.",
			"<b>PostgreSQL compatibility:</b> Fixed OID to integer comparisons to handle negative numbers consistently.",
			"<b>Maintenance:</b> Fixed float multiplications of NaN with zero and integer conversions near extreme values.",
			"<b>Maintenance:</b> Fixed tryCast semantics to be null-returning."
		]
	},
	{
		"version": "v2025-07-23",
		"date": "2025-07-23",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Added support for <tt>jsonb ? text</tt> aka <tt>jsonb_exists(jsonb, text)</tt>.",
			"<b>New Feature:</b> Added support for <tt>jsonb ?| array</tt> aka <tt>jsonb_exists_any(jsonb, array)</tt>.",
			"<b>New Feature:</b> Added support for <tt>jsonb ?& array</tt> aka <tt>jsonb_exists_all(jsonb, array)</tt>.",
			"<b>Performance:</b> Reduced disk and memory consumption of large index bulk loads.",
			"<b>Maintenance:</b> Fixed crash in rollback of index bulk loads.",
			"<b>Maintenance:</b> Fixed a nasty data corruption during repeated recovery. During recovery after an unclean shutdown, CedarDB did not immediately discard partially written logs. In case of a second unclean shutdown, those inconsistent log entries might have lead to inconsistent state.",
			"<b>Maintenance:</b> Fixed build for legacy distributions."
		]
	},
	{
		"version": "v2025-07-09",
		"date": "2025-07-09",
		"breaksdb": false,
		"notes": [
			"When not specifying any database location on the CLI, CedarDB now creates and uses a default database at <tt>~/.cedardb/db</tt>. You can now use a temporary in-memory using the <tt>--inmemory</tt> switch. (Note that this is prone to running OOM)",
			"<b>New Feature:</b> Preliminary support for <tt>pg_advisory_lock(bigint)</tt>.",
			"<b>New Feature:</b> Added support for <tt>jsonb @> jsonb</tt> aka <tt>jsonb_contains()</tt>.",
			"<b>New Feature:</b> Added support for <tt>json_build_object(variadic any)</tt>.",
			"<b>New Feature:</b> Added support for out-of-memory <tt>GROUP BY</tt>.",
			"<b>Maintenance:</b> Fixed a deadlock in our buffer manager.",
			"<b>Maintenance:</b> Fix assertion failure for subqueries in <tt>UPDATE</tt>.",
			"<b>Maintenance:</b> Removed jemalloc.",
			"<b>Maintenance:</b> Upgrade to LLVM20 and GCC15."
		]
	},
	{
		"version": "v2025-06-24",
		"date": "2025-06-24",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Support for <tt>extract(timezone, ..)</tt> for the <tt>timestamptz</tt> type.",
			"<b>New Feature:</b> Support for the <tt>transaction_timeout</tt> setting.",
			"<b>New Feature:</b> Support for <tt>to_json()</tt>.",
			"<b>PostgreSQL compatibility:</b> <tt>oid</tt>s can now be compared with all integer datatypes. This fixes the pgsql plugin of visual studio code.",
			"<b>PostgreSQL compatibility:</b> Support for subqueries in the <tt>unnest()</tt> function: <tt>select unnest((SELECT ARRAY[1,2]));</tt>. This fixes issues with <tt>pg_cli</tt>.",
			"<b>PostgreSQL compatibility:</b> Add server protocol support to the postgres-specific legacy types <tt>int2vector</tt> and <tt>oidvector</tt> in addition to the existing value support.",
			"<b>PostgreSQL compatibility:</b> Allow connections via TLSv1.2. CedarDB previously only allowed TLSv1.3 connections which caused issues with some clients such as AWS DMS.",
			"<b>Maintenance:</b> Solved an issue where CedarDB would sometimes fail to catch exceptions inside transactions. One of the rare case where the compiler was actually at fault: <a href=https://gcc.gnu.org/bugzilla/show_bug.cgi?id=119151>GCC Bug 119151</a>.",
			"<b>Maintenance:</b> Fixed a bug where <tt>pg_get_indexdef()</tt> with invalid column ids would trigger an assert."
		]
	},
	{
		"version": "v2025-05-28",
		"date": "2025-05-28",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> We've added the <tt>encode_geohash</tt> function! You can now compute a <a href=https://en.wikipedia.org/wiki/Geohash>geohash</a> from a latitude/longitude pair and a precision: <tt>select encode_geohash(48.317009, 11.662260, 5) -- returns u286c.</tt>",
			"<b>PostgreSQL compatibility:</b> CedarDB now correctly reports the version number of Postgres it's compatible with as <tt>160001</tt> instead of <tt>16001</tt>. This caused issues with a few clients that wrongly assumed CedarDB was only compatible with a Postgres version older than version 1(!).",
			"<b>Maintenance:</b> Fixed a bug where CedarDB would crash when running an explain statement without a format type: <tt>explain (format) select ...</tt>.",
			"<b>Maintenance:</b> Fixed a bug where recursive SQL queries that relied on the duplicate elimination of <tt>union</tt> wouldn't terminate in some circumstances."
		]
	},
	{
		"version": "v2025-05-14",
		"date": "2025-05-14",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Add support for the <tt>client_min_messages</tt> setting. It controls the minimum severity a message must have to be sent to a connecting client.",
			"<b>New Feature:</b> Streamlined command line args: <tt>--createdb</tt> will now open existing database files.",
			"<b>New Feature:</b> CedarDB now supports function calls in the <tt>FROM</tt> clause: <tt>select * from sqrt(4);</tt>.",
			"<b>New Feature:</b> SQL statements with syntax errors are now also added to the history in interactive mode. You can now browse to them and edit them from within the shell. Previously, only statements that have been executed successfully were added.",
			"<b>New Feature:</b> CedarDB now supports prepared statements using the construct <tt>first X rows only offset Y</tt> which is used e.g. by Hibernate for pagination.",
			"<b>PostgreSQL compatibility:</b> Stubbed the Postgres system tables <tt>pg_stats_ext</tt> and <tt>pg_stats_ext_exprs</tt>.",
			"<b>PostgreSQL compatibility:</b> Added the Postgres function <tt>pg_type_is_visible()</tt>.",
			"<b>PostgreSQL compatibility:</b> Stubbed the Postgres functions <tt>row_security_active()</tt>, <tt>pg_mcv_list_items()</tt>, <tt>pg_ident_file_mappings()</tt>, <tt>pg_stat_get_numscans()</tt> and <tt>has_foreign_data_wrapper_privilege()</tt>.",
			"<b>PostgreSQL compatibility:</b> Added all Postgres builtin UDFs that Postgres's <tt>information_schema</tt> relies on.",
			"<b>PostgreSQL compatibility:</b> Report the correct default collate of <tt>en_US.UTF-8</tt> in the <tt>pg_database</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Stubbed the  <tt>default_table_access_method</tt> setting which is required by <tt>pg_dump</tt> but irrelevant for CedarDB.",
			"<b>PostgreSQL compatibility:</b> Use Postgres-compatible <tt>oid</tt>s in the <tt>pg_database</tt> system table.",
			"<b>PostgreSQL compatibility:</b> <tt>pg_relation_size()</tt> and <tt>pg_index_size()</tt> now also support sequences.",
			"<b>Performance:</b> Reduced memory consumption of queries with aggregations.",
			"<b>Maintenance:</b> CedarDB now creates statistics for system tables. This significantly speed up some tools that joined a lot of system tables as CedarDB now generates better query plans.",
			"<b>Maintenance:</b> Fixed a rare bug where queries with <tt>IN</tt> expressions crashed.",
			"<b>Maintenance:</b> Fixed a bug in the docker image where CedarDB was stuck in an endless loop updating the database schema if it crashed before.",
			"<b>Maintenance:</b> Fixed a rare bug where deleted tuples could reappear under some circumstances.",
			"<b>Maintenance:</b> Fixed a bug where the optimizer crashed on queries with a provable empty result set under some circumstances.",
			"<b>Maintenance:</b> Fixed a bug where tables could become owner-less when the owner's password was changed.",
			"<b>Maintenance:</b> Fixed a bug where CedarDB could have failed gracefully but didn't and instead terminated if the system ran out of memory."
		]
	},
	{
		"version": "alpha/2025-04-23",
		"date": "2025-04-23",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Added support for <tt>COPY FROM <...> WITH ENCODING 'UTF8/UNICODE/SQLASCII'</tt>.",
			"<b>New Feature:</b> Add support for most <tt>information_schema</tt> tables, as defined by the SQL standard. You can see the implementation progress <a href=../compatibility/backend>here</a>.",
			"<b>New Feature:</b> Interactive mode no longer prints timing numbers per default. If you want to re-enable it, you can do so via \"<tt>\\timing on</tt>\" in interactive mode.",
			"<b>New Feature:</b> Looking up values in arrays via <tt>ALL/ANY</tt> now works: <tt>select 'a' = ANY('{a, b}')</tt>.",
			"<b>New Feature:</b> Add support for expanding row expressions with <tt>.*</tt>. The following now works: <tt>select (tablefun()).*</tt>",
			"<b>PostgreSQL compatibility:</b> Implemented the postgres functions <tt>has_database_privilege()</tt>, <tt>pg_get_publication_tables()</tt>, <tt>pg_get_ruledef()</tt> and <tt>has_server_privilege()</tt>.",
			"<b>PostgreSQL compatibility:</b> Casting the <tt>regproc</tt>,<tt>regprocedure</tt> and <tt>regnamespace</tt> types to text now returns the procedure resp. namespace name instead of just an internal identifier.",
			"<b>PostgreSQL compatibility:</b> Columns of system tables now always have the correct <tt>oid</tt> type, instead of being just an integer. This is required by a few clients who depend on the right behavior when casting attributes from system tables to text.",
			"<b>Maintenance:</b> Casting <tt>oid</tt>s of sequences to strings no longer triggers an assert."
		]
	},
	{
		"version": "alpha/2025-04-10b",
		"date": "2025-04-10",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Support for natively running CedarDB without Docker: <tt> curl https://get.cedardb.com | bash </tt> will install CedarDB on your system. You can then run <tt>./cedardb</tt> to start the server.",
			"<b>New Feature:</b> Streamlined docker build process. No need to re-download the Dockerfile after a new release. Re-running <tt>docker build</tt> will always create an up-to-date image.",
			"<b>New Feature:</b> Experimental ARM support! Both the native binary and docker image now natively run on ARM64 systems.",
			"<b>New Feature:</b> CedarDB can now bulk create indexes larger than main memory by spooling intermediate data to disk.",
			"<b>PostgreSQL compatibility:</b> CedarDB now supports schema-qualified column names: <tt> select schema.table.column from schema.table</tt>.",
			"<b>PostgreSQL compatibility:</b> Implemented the postgres-internal functions <tt>pg_get_function_arguments(), pg_get_function_identity_arguments(), pg_get_function_result(), pg_get_function_sqlbody(), pg_prepared_statement(), pg_timezone_abbrevs(), pg_timezone_names()</tt>.",
			"<b>PostgreSQL compatibility:</b> Implemented the <tt>pg_language</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Improved output of the <tt>pg_proc</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Stubbed a slew of postgres-internal system functions: <tt>pg_available_extensions(), pg_available_extension_versions(), pg_config(), pg_cursor(), pg_get_backend_memory_contexts(), pg_get_replication_slots(), pg_get_shmem_allocations(), pg_hba_file_rules() ,pg_prepared_xact(), pg_show_all_file_settings(), pg_show_all_settings(), pg_show_replication_origin_status(), pg_is_wal_replay_paused(), pg_stat_get_activity()</tt>",
			"<b>Maintenance:</b> Fixed a crash in <tt>regex_split</tt>.",
			"<b>Maintenance:</b> Fixed a crash in array comparisons.",
			"<b>Maintenance:</b> Fixed a bug where CedarDB's loading serialized query plans could lead to a crash.",

			"<b>Maintenance:</b> Fixed a bug where CedarDB wasn't able to unnest highly correlated expressions.",
			"<b>Maintenance:</b> Fixed a bug where we didn't correctly store precision/scale of array types across database restarts in some cases.",
			"<b>Maintenance:</b> Fixed a rare crash where we double-freed a string that represented a null value.",
			"<b>Maintenance:</b> <tt>cedardb --version</tt> now reports a more human-readable version identifier instead of just a git commit id."
		]
	},
	{
		"version": "alpha/2025-03-26",
		"date": "2025-03-26",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Print dynamic filters in <tt>explain verbose</tt>.",
			"<b>Maintenance:</b> Fixed a bug where old databases that contained deleted indexes could not be loaded in the newest version of CedarDB.",
			"<b>Maintenance:</b> Fixed parsing ISO8601 intervals with more than 24 trailing zeroes."
		]
	},
	{
		"version": "alpha/2025-03-25",
		"date": "2025-03-25",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Added support for <tt>DROP ROLE</tt>.",
			"<b>New Feature:</b> Added support for <tt>DROP GROUP</tt>.",
			"<b>New Feature:</b> Added support for <tt>DROP SCHEMA</tt> as long as the schema is empty.",
			"<b>New Feature:</b> Added support for <tt>DROP SEQUENCE</tt>.",
			"<b>New Feature:</b> Added support for <tt>pg_get_constraintdef()</tt>. As a consequence of this, '\\d' in <tt>psql</tt> now shows foreign keys.",
            "<b>PostgreSQL compatibility:</b> <tt>pg_table_size()</tt> now works with system tables.",
            "<b>PostgreSQL compatibility:</b> <tt>COPY</tt> now works with system tables: <tt>copy pg_class to stdout;</tt>",
            "<b>PostgreSQL compatibility:</b> Added support for <tt>DROP INDEX CONCURRENTLY</tt> which is a no-op since CedarDB always drops indexes concurrently, but is required by some tools.",
            "<b>PostgreSQL compatibility:</b> Added stubbed <tt>pg_get_triggerdef()</tt> function. This is required by some tools like <tt>pg_dump</tt>.",
			"<b>PostgreSQL compatibility:</b> Stubbed <tt>pg_partition_ancestor()</tt> system function. CedarDB partitions transparently, so this always returns an empty table.",
            "<b>PostgreSQL compatibility:</b> Added support for <tt>with ordinality</tt> in <tt>pg_partition_ancestor()</tt> system function.",
			"<b>PostgreSQL compatibility:</b> Added support for <tt>with ordinality</tt> in <tt>array_unnest()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Server now correctly reports compatibility with PostgreSQL 16.1 instead of 11.3 under all circumstances.",
			"<b>PostgreSQL compatibility:</b> Get rid of the custom namespace <tt>cedar</tt> which caused issues with some tools.",
            "<b>PostgreSQL compatibility:</b> Allow casts from oids inside strings.",
			"<b>PostgreSQL compatibility:</b> CedarDB no longer prints implicitly created foreign key indexes in <tt>pg_class</tt> and <tt>pg_index</tt>.",
			"<b>PostgreSQL compatibility:</b> Print the full name when calling <tt>pg_get_indexdef()</tt> on a table that is not in the search path.",
			"<b>PostgreSQL compatibility:</b> <tt>pg_table_is_visible</tt> now works on indexes and sequences.",
			"<b>PostgreSQL compatibility:</b> Use Postgres's special legacy <tt>oidvector</tt> and <tt>int2vector</tt> types in <tt>pg_index</tt>.",
			"<b>PostgreSQL compatibility:</b> CedarDB now correctly enforces unique names across tables, views, indexes, and sequences. <emph>If you previously two of those objects with the same name, they have been renamed!</emph>. So if you had a table and a sequence both called <tt>foo</tt>, the sequence is now called <tt>foo1</tt>.",
			"<b>PostgreSQL compatibility:</b> <tt>SELECT * FROM <sequence></tt> now works and returns the same table output as PostgreSQL.",
			"<b>PostgreSQL compatibility:</b> Sequence limits now behave identical to Postgres.",
			"<b>PostgreSQL compatibility:</b> Implement <tt>pg_opclass</tt> system table.",
			"<b>Performance:</b> Streamlined counting characters with SSE.",
			"<b>Performance:</b> Added support for AES hardware accelerated hashing via gxhash.",
			"<b>Performance:</b> Expressions of the type <tt>regex_replace(in, pattern, '\\1')</tt> are no optimized to <tt>regexp_substr()</tt>.",
			"<b>Performance:</b> Leading and trailing wildcards in <tt>regexp_substr()</tt> are now dropped.",
			"<b>Performance:</b> CedarDB now accepts comments which contain invalid UTF-8.",
			"<b>Maintenance:</b> Updated ICU version to 76.1, introducing support for new unicode characters.",
			"<b>Maintenance:</b> Fixed off-by-one error in <tt>regexp_substr()</tt>.",
			"<b>Maintenance:</b> Ensure sequences now have an explicit start value.",
			"<b>Maintenance:</b> Severely hardened UTF-8 validation.",
			"<b>Maintenance:</b> Fixed on OOB access when parsing ISO8601 intervals which lead to a crash.",
			"<b>Maintenance:</b> Fixed a bug where generate_series() didn't correctly work when used in conjunction with arrays that weren't 1-indexed.",
			"<b>Maintenance:</b> Fixed a bug where the undocumented Postgres function <tt>_pg_expandarray</tt> didn't correctly work on array that weren't 1-indexed.",
			"<b>Maintenance:</b> Fixed a bug where nulls weren't correctly ordered when using radix sort.",
			"<b>Maintenance:</b> Fixed a bug in <tt>regexp_match()</tt> and <tt>regexp_split_to_array()</tt> where they caused an error when used on values originating in a table.",
			"<b>Maintenance:</b> Fixed a bug where function lookups without an explicit namespace didn't find the function.",
			"<b>Maintenance:</b> Fixed quantified expressions over string arrays: <tt>insert into testtext values (array['test',null,'averylongstring']), (array['test']); select 'x' = ANY(x) from testtext;</tt> now works.",
			"<b>Maintenance:</b> Fixed an error when casting from or to <tt>TEXT[]</tt> arrays.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2025-02-20",
		"date": "2025-02-20",
		"breaksdb": false,
		"notes": [
            "<b>PostgreSQL compatibility:</b> We made various compatibility time zone and interval changes such that we can pass the JDBC time tests.",
			"<b>PostgreSQL compatibility:</b> We now allow $ symbols in identifiers.",
			"<b>PostgreSQL compatibility:</b> You can now write nested comments in your SQL queries.",
			"<b>PostgreSQL compatibility:</b> Simplified index size checking by parsing names as regclass oids in <tt>pg_table_size('foo_pkey')</tt>." ,
			"<b>PostgreSQL compatibility:</b> PostgreSQL's parse messages are often sent without typemod. We now use the generic type as default.",
            "<b>PostgreSQL compatibility:</b> We now print arrays and calculate the <tt>array_length</tt> according to PostgreSQL. Our array printer used to differ for arrays that have special characters, are empty, or have null values.",
            "<b>PostgreSQL compatibility:</b> We now allow changing several transaction behavior settings with <tt>SET TRANSACTION</tt> statements and changing the default session behavior with <tt>SET SESSION CHARACTERISTICS AS TRANSACTION</tt> statements.",
            "<b>PostgreSQL compatibility:</b> OIDs of system tables are now identical to the ones PostgreSQL uses.",
            "<b>Performance:</b> If the join build side is empty, we skip evaluating the probe side completely when this is safe to do.",
            "<b>Performance:</b> We revised operations that use the sequentially consistent memory model, replacing sequentially consistent stores and loads (where possible) with more performant acquire/release operations.",
            "<b>Maintenance:</b> Fixed a rare race condition where the current file descriptor was closed and data was read. This could cause incorrect results to be returned. Because the likelihood of this increased in constrained memory settings, we now use more rigorous integration tests that put more stress on the memory subsystem.",
            "<b>Maintenance:</b> Fixed a bug when we transformed an asof join conditions to a regular join condition.",
            "<b>Maintenance:</b> We fixed a rare race condition in our group commit that could cause queries to be live-locked until the next transaction commits.",
            "<b>Maintenance:</b> When processing insert on conflict, we only returned the updated rows instead of all rows.",
            "<b>Maintenance:</b> Fixed a bug where we used a cached functional dependency after unnesting the query which could trigger an assert.",
            "Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2025-02-04",
		"date": "2025-02-04",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> CedarDB's explain output includes more details: <ul> <li> <tt>explain</tt> now shows internally generated CTEs.</li> <li> <tt>explain analyze</tt> now shows the memory usage of hash joins and <tt>group by</tt> aggregations.</li><li><tt>explain analyze</tt> now reports the I/O statistics of table scans.</li></ul>",
			"<b>New Feature:</b> You can now directly query csv files located on the server via <tt>select * from '/path/to/filename.csv'</tt>.",
			"<b>New Feature:</b> Introduced the <tt>debug.log_slow_queries</tt> setting. It will log all queries which took longer than x milliseconds to execute on the server- and on the client side. Activate via <tt>set debug.log_slow_queries = min_time_in_milliseconds</tt>. <i>Warning: This is a global setting!</i>",


			"<b>PostgreSQL compatibility:</b> Add <tt>pg_prepared_statements</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Correctly consider the <tt>weight</tt> parameter when deserializing numerics received in binary format.",
			"<b>PostgreSQL compatibility:</b> <tt>pg_index</tt> now correctly reports index orders (ascending or descending).",
			"<b>PostgreSQL compatibility:</b> The row description message of the wire protocol now correctly reports the base table columns of query results. This is required by e.g. JDBC to update ResultSets of a Query.",
			"<b>PostgreSQL compatibility:</b> Text output of timestamps now correctly truncates trailing zeroes in the microsecond field.",
			"<b>PostgreSQL compatibility:</b> <tt>pg_type</tt> now correctly reports the name of array types.",
			"<b>PostgreSQL compatibility:</b> Return a more readable error message when a varchar exceeds its max length.",
			"<b>PostgreSQL compatibility:</b> Startup messages may now contain integral timezone offsets instead of just a name.",
			"<b>PostgreSQL compatibility:</b> CedarDB will now correctly send a ParameterStatus message to the client if a setting has been updated.",
			"<b>PostgreSQL compatibility:</b> Extend the parsing logic of date style settings.",
			"<b>Performance:</b> CedarDB now uses <tt>O_DIRECT</tt> on all systems that support it.",
			"<b>Performance:</b> Improved selection of unique indexes. CedarDB previously only considered indexes with an explicit constraint as unique. Now, we also consider if the index attributes include a key, which allows choosing better index scans.",
			"<b>Performance:</b> CedarDB now prefers covering and smaller indexes for index joins instead of always preferring primary keys.",
			"<b>Performance:</b> CedarDB will now prefer using a covering index for index scans where possible. The previous index selection strategy caused us to sometimes access the underlying table even if a covering index was available that guaranteed no table lookup would be required.",
			"<b>Performance:</b> Prefer using a table scan over an index scan if we have a very selective restriction on a table that is not covered by the index.",
			"<b>Maintenance:</b> Fix an issue where CedarDB created overly many memory mappings. This resulted in unnecessary out of memory errors on strict Linux configurations. This only became an issue when creating more than 10'000 tables.",
			"<b>Maintenance:</b> Fix a bug where we didn't parse <tt>drop operator</tt> correctly.",
			"<b>Maintenance:</b> Output offset in the seconds range on timestamp with timezones. This broke timestamps in timezones who had adjustements in the past which were not evenly divisble by minutes. One example is Casablanca, where the timezone was adjusted by 20 seconds in 1913.",
			"<b>Maintenance:</b> Fix a bug where we didn't consider some tuples in <tt>union all</tt> in rare edge cases.",
			"<b>Maintenance:</b> Fix some edge cases for array input from strings where the parser, e.g., didn't consider tab-stops as white-space."
		]
	},
	{
		"version": "alpha/2025-01-23",
		"date": "2025-01-23",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> CedarDB now asynchronously loads data from disk into its page cache. This makes queries that touch data that is not currently cached up to 4x faster!",
			"<b>New Feature:</b> Output of <tt>explain</tt> is now flatter, allowing you to more easily read query plans of complex queries. For a full overview and instructions on how to get back the old behavior, please refer to <a href=https://cedardb.com/docs/references/sqlreference/statements/explain>our docs</a>.",
			"<b>New Feature:</b> You can now cast integers to bitstrings: <tt>select 29::bit(4)</tt>.",
			"<b>New Feature:</b> Support for read-only transactions via <tt>set transaction_read_only</tt>.",
			"<b>New Feature:</b> <tt>explain analyze</tt> now returns more detailed information about execution times.",
			"<b>New Feature:</b> Add support for a <tt>tinyint</tt> type.",
			"<b>PostgreSQL compatibility:</b> System tables and views are now shown in <tt>pg_class</tt>.",
			"<b>PostgreSQL compatibility:</b> Allow parsing values of type <tt>time</tt> from strings that also specify a date.",
			"<b>PostgreSQL compatibility:</b> Correct handling of namespaces and owners in system tables.",
			"<b>PostgreSQL compatibility:</b> <tt>pg_table_is_visible()</tt> now correctly observes <tt>search_path</tt>.",
			"<b>PostgreSQL compatibility:</b> Enforce precision of numerics when casting them from strings or integral types.",
			"<b>PostgreSQL compatibility:</b> Ensure that no table with <tt>oid</tt> 0 is printend in system tables since 0 signals an invalid oid. Required by some clients.",
			"<b>PostgreSQL compatibility:</b> Support binary output of the <tt>ByteArray</tt>, <tt>JSON</tt>, and <tt>Time</tt> datatypes.",
			"<b>PostgreSQL compatibility:</b> Looking up functions now works with fully qualified names as well: <tt>select 'pg_catalog.sum(int)'::regproc;</tt>",
			"<b>PostgreSQL compatibility:</b> Allow using relation names in function calls without explicit casting to regclass: <tt>pg_table_size('foo');</tt>",
			"<b>PostgreSQL compatibility:</b> Add <tt>array_in</tt> dummy function in <tt>pg_proc</tt> and <tt>pg_types</tt>. Required by some JDBC queries inferring whether a given type is an array type.",
			"<b>PostgreSQL compatibility:</b> Support SQL standard compliant way to set the time zone.",
			"<b>Performance:</b> Improve index selecion for index scans.",
			"<b>Performance:</b> Skip over subtrees guaranteed to generate no results during execution.",
			"<b>Maintenance:</b> Work around a bug in LLVM calling conventions. See the corresponding <a href='https://github.com/llvm/llvm-project/issues/123935'>issue</a> in the LLVM repo.",
			"<b>Maintenance:</b> Print nicer error message when exceeding the maximum precision of a numeric.",
			"<b>Maintenance:</b> Fix a bug with <tt>null</tt> handling in <tt>generate_subscripts()</tt>.",
			"<b>Maintenance:</b> Fix a bug with <tt>null</tt> handling in upserts.",
			"<b>Maintenance:</b> Fix a bug where we wrongly optimized multi-column conditions to <tt>IN</tt> expressions.",
			"<b>Maintenance:</b> Got rid of pesky irrelevant message about perf counters not being able to be initialized.</tt>",
			"<b>Maintenance:</b> Fixed a bug where the state of sequences was not correctly recovered after a system crash."
		]
	},
	{
		"version": "alpha/2025-01-03",
		"date": "2025-01-03",
		"breaksdb": false,
		"notes": [
			"<b>Performance:</b> Vectorize printing of UUIDs. This drastically speeds up performance for queries returning a lot of UUIDs.",
			"<b>Performance:</b> Refined optimizer logic on when to employ an index scan when buffer size is limited to further reduce buffer thrashing.",
			"<b>Maintenance:</b> Columns can now be called 'step' again.",
			"<b>Maintenance:</b> Fixed a bug where index scans in combination with a <tt>limit</tt> without <tt>order by</tt> clause did not produce all matching tuples.",
			"<b>Maintenance:</b> Fixed a bug where index range scans in combination with a <tt>limit</tt> did not produce all matching tuples.",
			"<b>Maintenance:</b> Fixed a bug where inserting null values reported a unique constraint violation if the index enforcing uniqueness was created after rows had already been inserted.",
			"<b>Maintenance:</b> Fixed several bugs in unnesting of asof joins.",
			"<b>Maintenance:</b> Fixed a crash when calling <tt>pg_get_view_def</tt> on views with long names.",
			"<b>Maintenance:</b> Fixed a bug where using non constant <tt>limit</tt> or <tt>offset</tt> declarations triggered an assert.",
			"<b>Maintenance:</b> Fixed a race condition when changing settings concurrently.",
			"<b>Maintenance:</b> Fixed a bug where queries operating on tables with multiple unique and non-unique indexes would skip some rows.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-12-24",
		"date": "2024-12-24",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> We have added support for explain statements after different query optimization steps. For example, <tt>explain (step Unnesting) select * from foo, bar where foo.a = bar.b</tt> shows the query tree after the 'Unnesting' optimization step but before the 'Predicate Pushdown' step. For the syntax and available steps, please refer to <a href=https://cedardb.com/docs/references/sqlreference/statements/explain/#step>our docs</a>.",
			"<b>Performance:</b> The logic deciding whether to use an index for a join is now more sophisticated. Previously, it could happen that CedarDB suddenly switched to a very disadvantageous query plan once a relation's size reached 10% of the available main memory. CedarDB now also takes the cost of buffer thrashing into account, not only a relation's size.",
			"<b>Performance:</b> CedarDB is now more careful on when it holds an exclusive lock on the database schema during DDL statements, improving performance of DDL queries.",
			"<b>PostgreSQL compatibility:</b> Support for non constant values for <tt>limit</tt> offset: It is now possible to prepare queries like <tt> select * from foo limit $1 offset $2</tt>. This was e.g. required by <a href=https://orm.drizzle.team/drizzle-studio/overview>Drizzle Studio</a>.",
			"<b>PostgreSQL compatibility:</b> Add <tt>pg_column_is_updatable()</tt> builtin function.",
			"<b>Maintenance:</b> Fix a bug in the null-handling logic of <tt>IN</tt> expressions which triggered a faulty assert. Also occured in instances where no explicit <tt>IN</tt> expression was present but CedarDB optimized a different expression into such an expression.",
			"<b>Maintenance:</b> Tables created in the temporary <tt>pg_temp</tt> namespace can now actually be referenced in queries and aren't lost to the aether.",
			"<b>Maintenance:</b> Fix a race condition in the group commit queue where a thread waiting for a sync to disk was notified before it started to wait. This could lead to deadlocks of bulk transactions ",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-12-16",
		"date": "2024-12-16",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Add support for the <tt>serial</tt>, <tt>smallserial</tt>, and <tt>bigserial</tt> data types.",
			"<b>New Feature:</b> Add trigonometric functions with degrees: <tt>acosd, asind, atand, cosd, cotd, sind, tand</tt>.",
			"<b>New Feature:</b> Add hyperbolic trigonometric functions: <tt>sinh, cosh, tanh, asinh, acosh, atanh</tt>.",
			"<b>New Feature:</b> Add support for <tt>generate_subscripts()</tt>.",
			"<b>New Feature:</b> Very basic support for the <a href=https://orm.drizzle.team/>Drizzle</a> ORM.",
			"<b>Performance:</b> Doing inserts in batches of 128 or more elements is now considerably faster.",
			"<b>Performance:</b> <tt>coalesce</tt> expressions with large number of arguments are now optimized in linear instead of quadratic time.",
			"<b>PostgreSQL compatibility:</b> support parsing oids from namespace literals: <tt>select 'pg_temp'::regnamespace </tt>.",
			"<b>PostgreSQL compatibility:</b> calling <tt>json_array_elements()</tt> on null now returns an empty string.",
			"<b>PostgreSQL compatibility:</b> malformed protocol messages now return the <tt>ProtocolViolation</tt> error code instead of <tt>InternalError</tt>.",
			"<b>PostgreSQL compatibility:</b> Failing to authenticate now returns the correct error codes.",
			"<b>PostgreSQL compatibility:</b> It is now possible to bind up to 65535 parameters to a prepared statement, instead of the previous maximum of 32767.",
			"<b>PostgreSQL compatibility:</b> The <tt>pg_columnkeys</tt> column in the <tt>pg_constraint</tt> and <tt>pg_index</tt> system tables are now 1-indexed instead of 0-indexed.",
			"<b>PostgreSQL compatibility:</b> Add <tt>has_sequence_privilege()</tt> builtin function.",
			"<b>PostgreSQL compatibility:</b> Add <tt>pg_sequence_last_value()</tt> builtin function.",
			"<b>PostgreSQL compatibility:</b> Update the <tt>pg_sequence</tt> system view to return meaningful data.",
			"<b>PostgreSQL compatibility:</b> List sequences in the <tt>pg_class</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Add stubbed <tt>pg_get_serial_sequence()</tt> builtin function.",
			"<b>PostgreSQL compatibility:</b> Add stubbed <tt>pg_stat_user_indexes</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Add stubbed <tt>pg_stat_all_indexes</tt> system table.",
			"<b>Maintenance:</b> Fix an exception when parsing <tt>SET</tt> statements.",
			"<b>Maintenance:</b> Malformed client messages are now handed gracefully and close the connection instead of triggering an assertion failure.",
			"<b>Maintenance:</b> Automatically abort queries that run into a live lock. This could happen when trying to evict buffer pages while all buffer pages where pinned.",
			"<b>Maintenance:</b> Parsing alter role statements setting the connection limit to values lower than -1 now throws the expected error instead of triggering an assert.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-12-05",
		"date": "2024-12-05",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> The docker image is now compatible with external <tt>pg_isready</tt> health checks. Previously, CedarDB would be started and stopped multiple times during setup while being externally reachable. This caused <tt>pg_isready</tt> to prematurely declare CedarDB being up and subsequent connections to fail.",
			"<b>New Feature:</b> Log messages are now prefixed with a timestamp.",
			"<b>New Feature:</b> More detailed CSV import error messages: When the format is wrong, CedarDB now returns the offending column and the detailed issue.",
			"<b>PostgreSQL compatibility:</b> Sequence names now automatically convert to oids. You can now write <tt>CREATE SEQUENCE serial; select nextval('serial');</tt>",
			"<b>PostgreSQL compatibility:</b> Support for <tt>factorial(n)</tt>, in addition to the already existing <tt>n!</tt> and <tt>!!n</tt>.",
			"<b>PostgreSQL compatibility:</b> Subtracting two dates now returns an integer with the difference in days, instead of an interval.",
			"<b>PostgreSQL compatibility:</b> <tt>split_part</tt> now allows for negative arguments to search backward from the end and correctly returns <tt>null</tt> in some corner cases.",
			"<b>Maintenance:</b> Fixed a bug where docker containers would not start correctly on Windows.",
			"<b>Maintenance:</b> Removed a few spurious asserts which gave the impression something went wrong when everything was in fact fine.",
			"<b>Maintenance:</b> Fixed a crash for queries which would join at least two tables using the <tt>json_array_elements</tt> set generating function.",
			"<b>Maintenance:</b> Fixed a rare deadlock when creating indexes. This could happen when re-creating an index after dropping it.",
			"<b>Maintenance:</b> Fixed an issue where dropped indexes were wrongly restored when a concurrent transaction also modifying it was aborted.",
			"<b>Maintenance:</b> Fixed a case where CedarDB tried to truncate a log too early and subsequently failed an assert.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-11-21",
		"date": "2024-11-21",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Add support for <tt>psql</tt> builtin describe commands <tt>\\d table</tt> and <tt>\\d+ table</tt>.",
			"<b>PostgreSQL compatibility:</b> Include attribute defaults in the <tt>pg_attrdef</tt> system table.",
			"<b>Performance:</b> Reduce transaction tail latency: When the overall write-ahead log size becomes too large, writing transactions are now throttled instead of paused.",
			"<b>Maintenance:</b> Fix a rare deadlock during concurrent compression of inserts.",
			"<b>Maintenance:</b> Fix a crash when inserting strings just smaller than 64 KB.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-11-15",
		"date": "2024-11-15",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> This release comes with a new Docker image that more closely mirrors the behavior of the official Postgres image. You can now pass the superuser name and password as environment variabls at container startup instead of having to create them manually inside Docker! For a full list of changes and new features, check out our new <a href=/docs/get_started/install_with_docker/ target=_blank> Docker docs</a>.",
			"<b>New Feature:</b> The Docker image now correctly exports the <tt>PG_HOST</tt> environment variable. When using psql from inside the Docker container, you no longer need to write <tt>-h /tmp</tt>.",
			"<b>Performance:</b> More aggressive autocompression of tables. Previously, CedarDB only compressed tuples during bulk inserts, scan-intensive queries or when the user manually executed <tt>VACUUM</tt>. CedarDB now also autocompresses tuples after small inserts, which considerably improves table scan performance and significantly reduces storage consumption for write-intensive workloads",
			"<b>PostgreSQL compatibility:</b> Constructing an array from empty input now returns an empty array instead of null, e.g. <tt>select array(select * from unnest(ARRAY[]::text[]));</tt>",
			"<b>PostgreSQL compatibility:</b> Mirror undocumented Postgres behavior regarding function and table aliases: <tt> select a from foo a </tt> now works.",
			"<b>Maintenance:</b> Fixed a race condition in the buffer manager where CedarDB could lose updates. This race condition caused the database to shut down and the recovery process to complain about an invalid system state. It was only triggered under heavy memory pressure when a page was incorrectly selected twice for eviction.",
			"<b>Maintenance:</b> User defined functions are now formatted correctly when printing with <tt>explain (analyze, format sql)</tt>.",
			"<b>Maintenance:</b> Fixed a rare case where <tt>IN</tt> expressions with nullable inputs could cause a query to abort</tt>.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-11-05",
		"date": "2024-11-05",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Improved internal memory allocation: CedarDB now tracks memory consumption during query execution and aborts queries consuming too much working memory.",
			"<b>New Feature:</b> Add <tt>VACUUM</tt> statement. It manually triggers data compression of newly inserted data that hasn't been queried often yet.",
			"<b>Performance:</b> Greatly speed up queries of the pattern <tt> SELECT * FROM foo LIMIT 1</tt>.",
			"<b>Performance:</b> Improve estimates on tables with unique constraints.",
			"<b>Performance:</b> Reduce write-ahead log size. CedarDB now tries to prune the log much more eagerly to reduce disk space consumption.",
			"<b>PostgreSQL compatibility:</b> Add name datatype to <tt>pg_type</tt> system table. Required by some ORMs using JDBC (e.g., \"Exposed\") to infer maximum length of table names and columns.",
			"<b>PostgreSQL compatibility:</b> Allow parsing dates from strings specifying a full timestamp. Used by some ORMs such as \"Exposed\" to construct dates.",
			"<b>Maintenance:</b> Fix case where created functions couldn't be dropped.",
			"<b>Maintenance:</b> Fix deadlock when client connection unexpectedly drops.",
			"<b>Maintenance:</b> Upgraded to LLVM 19.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-10-17",
		"date": "2024-10-17",
		"breaksdb": false,
		"notes": [
			"<b>Maintenance:</b> Stability fix for replanning prepared statements with UPSERTs."
		]
	},
	{
		"version": "alpha/2024-10-16",
		"date": "2024-10-16",
		"breaksdb": false,
		"notes": [
			"<b>Maintenance:</b> Check for newer CedarDB versions on Docker startup.",
			"<b>Maintenance:</b> Fix rare cases of lost tuples in UPSERT queries.",
			"<b>Maintenance:</b> Use consistent sort order for BLOB types.",
			"<b>Performance:</b> Lazily compile prepared statements.",
			"<b>PostgreSQL compatibility:</b> Use PostgreSQL-compliant BigNumeric type truncation.",
			"<b>PostgreSQL compatibility:</b> Support <tt>regclass</tt> casts for system tables.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-10-11",
		"date": "2024-10-11",
		"breaksdb": false,
		"notes": [
			"<b>New Feature:</b> Added support for <a href=/docs/references/advanced/asof_join/ target=_blank>AsOf joins</a>.",
			"<b>New Feature:</b> Added support for <a href=/docs/references/sqlreference/statements/upsert target=_blank>upserts</a> through <tt>ON CONFLICT DO UPDATE</tt> and <tt>ON CONFLICT DO NOTHING</tt>.",
			"<b>New Feature:</b> Added support for additional <a href=/docs/references/sqlreference/functions/aggregation/ target=_blank>aggregation functions</a>.",
			"<b>Maintenance:</b> Update the timezone database to version 2024b.",
			"<b>Maintenance:</b> Fix daylight savings time handling for regions with daylight savings differences other than 1 hour.",
			"<b>Performance:</b> Improve join unnesting for dependent joins.",
			"<b>Performance:</b> Various cardinality estimation improvements.",
			"<b>Performance:</b> Add vectorization support for pg_vector-type cosine distance calcultions.",
			"<b>Performance:</b> Lazily compile user-defined functions.",
			"<b>PostgreSQL compatibility:</b> Support array-constructing subqueries: <tt>select array(values(1),(1));</tt> returns <tt>{1,1}</tt>.",
			"<b>PostgreSQL compatibility:</b> Added <tt>has_column_privilege()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Added <tt>has_function_privilege()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Improve output of <tt>pg_attribute</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Improve output of <tt>pg_type</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Full support for <tt>pg_timezone_names</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Full support for <tt>pg_timezone_abbrevs</tt> system table.",
			"<b>PostgreSQL compatibility:</b> Added support for <tt>default</tt> keyword in <tt>INSERT</tt> statements.",
			"<b>PostgreSQL compatibility:</b> Use PostgreSQL-compliant sort order for <tt>bytea</tt> type.",
			"<b>PostgreSQL compatibility:</b> Fix output of <tt>current_schema()</tt> function.",
			"Various bug fixes, stability, and performance improvements."
		]
	},
	{
		"version": "alpha/2024-09-13",
		"date": "2024-09-13",
		"breaksdb": true,
		"notes": [
			"<b>New Feature:</b> Implemented the functionality of the <a href=https://github.com/pgvector/pgvector>pgvector</a> extension. For a feature description take a look at the <a href=../references/datatypes/vector>vector datatype reference</a>, the <a href=../references/advanced/pgvector>pgvector extension compatibility docs</a>, or follow <a href=../example_datasets/glove>our new vector tutorial</a>.",
			"<b>New Feature:</b> Restructured database file storage: All files of a given database are stored in the same directory to declutter your server. Existing database files will be converted to the new format automatically on startup, no manual intervention required.",
			"<b>New Feature:</b> Added support for quantified expressions over subqueries and arrays: <br /> <tt>with tmp(x) as (select array[1,2,3]) select 1 = ANY(x) from tmp</tt>.",
			"<b>New Feature:</b> Implicitly cast string constants in binary expressions: You can now, for example, write <tt> 123 + '456'</tt>.",
			"<b>New Feature:</b> Better type deduction for unknown types: Parameters now seamlessly work in function calls. For example <tt>lower($1)</tt> now treats the parameter as a string.",
			"<b>New Feature:</b> Added support for row results in subqueries and non constant arrays: <br /> <tt>select (r.r).\"2\", (r.r).\"1\", (r.r).\"0\" from (select row('foo','bar','baz')) r(r)\"</tt> returns <tt> baz bar foo </tt>.",
			"<b>Maintenance:</b> Introduce recovery log versioning to reduce the likelihood of having to break backwards compatibility in the future.",
			"<b>Performance:</b> Optimizer: Improved cardinality estimation for very selective predicates. This sometimes improves execution plans, where we observed cases of 10x speedup",
			"<b>Performance:</b> Implemented a heuristic that inlines CTEs that materialize a large state but are cheap to recalculate. This improves TPC-DS Q95's performance by about 10x, for example.",
			"<b>Performance:</b> More aggressively use band joins where beneficial, even if the query does not contain <tt>between</tt> conditions.",
			"<b>Performance:</b> Optimize concat calls with single arguments: <tt> concat(x)</tt> becomes <tt> cast(x as text)</tt>.",
			"<b>PostgreSQL compatibility:</b> Honor Postgres <tt>AS NOT MATERIALIZED</tt> hint in CTEs.",
			"<b>PostgreSQL compatibility:</b> Timestamp calculations are now done in UTC instead of local time in accordance with the Postgres docs.",
			"<b>PostgreSQL compatibility:</b> When adding intervals to timestamps, the months, days, and microseconds fields of the interval value are handled in turn.",
			"<b>PostgreSQL compatibility:</b> Correctly output regclass and regtype names: For example, <tt>pg_typeof(42)</tt> now returns <tt>'int4'</tt> instead of a cryptic identifier.",
			"<b>PostgreSQL compatibility:</b> <tt>trim()</tt> now allows for Postgres' alternative syntax: Instead of <tt>trim('x' from 'xfoox')</tt> you can now also write <tt>trim('xfoox','x')</tt>.",
			"<b>PostgreSQL compatibility:</b> Added <tt>to_regtype()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Added <tt>pg_typeof()</tt> function.",
			"<b>PostgreSQL compatibility:</b> Added <tt>nameconcatoid()</tt> function.",
			"Various bug fixes, stability, and performance improvements."
		]
	},

	{
		"version": "alpha/2024-07-24",
		"date": "2024-07-24",
		"breaksdb": true,
		"notes": [
			"<b>Maintenance:</b> Split data file and schema version numbering to reduce the likelihood of having to break backwards compatibility in the future",
			"<b>PostgreSQL compatibility:</b> Full support for all PostgreSQL timezone abbreviations",
			"<b>PostgreSQL compatibility:</b> Parse (not-) materialized Common Table Expression hints",
			"<b>PostgreSQL compatibility:</b> Added for pg_proc system table",
			"<b>PostgreSQL compatibility:</b> Added pg_function_is_visible() function",
			"Various bug fixes and stability improvements"
		]
	},
	{
		"version": "alpha/2024-07-12",
		"date": "2024-07-12",
		"notes": [
			"<b>New Feature:</b> Support for SQL UDF table functions in SELECT statements",
			"<b>New Feature:</b> Allow creating and releasing SAVEPOINTs within transactions",
			"<b>New Feature:</b> Support quantified expressions over constant arrays",
			"<b>New Feature:</b> Support 'ON CONFLICT DO NOTHING' for upserts",
			"<b>PostgreSQL compatibility:</b> Support for parsing 'COPY FREEZE' performance hint",
			"<b>PostgreSQL compatibility:</b> Support for compound date styles",
			"<b>PostgreSQL compatibility:</b> The pg_class system table now also shows views",
			"<b>PostgreSQL compatibility:</b> The pg_constraint system table now also shows indexes",
			"<b>PostgreSQL compatibility:</b> Added pg_relation_is_updateable() function",
			"<b>PostgreSQL compatibility:</b> Added pg_my_temp_schema()",
			"<b>PostgreSQL compatibility:</b> Added pg_description system table",
			"<b>PostgreSQL compatibility:</b> Added has_schema_privileges() function",
			"<b>PostgreSQL compatibility:</b> Added has_any_column_privilege() function",
			"<b>PostgreSQL compatibility:</b> Added pg_get_keywords() function",
			"<b>Performance:</b> 300x performance improvement for calculating table sizes via pg_total_relation_size()",
			"Various bug fixes and stability improvements"
		]
	}
]
